#!/usr/bin/env python
# coding: utf-8

#Assigment by Furkan Ayas

import networkx as nx
from networkx.drawing.nx_pydot import write_dot
import graphviz as p
import scipy as sp
import random

#from networkx.classes.reportviews import NodeView

#EDGE CONNECTED OPPOSITE POLARITE NODES WILL STICK TOGETHER
#WE GET RANDOM N NUMBER WHICH BETWEEN 100-200
#print("Random N from 100 to 200")
N = random.randint(100,200)


#Creating Erd√∂s-Renyi Graph with networkx with N vertices and p = 0.5 <- 'p' is probability:[0,1] 0.5 positive, 0.5 negative.  Graph -> G(n,p) 
#we create random graph for each time


global ERGraph

#They do same operations
ERGraph = nx.erdos_renyi_graph(N, 0.5, seed=None, directed=False) #nx.draw(ERG)
#ERGraphSecondTechnique = nx.generators.random_graphs.erdos_renyi_graph(N, 0.5, seed=None, directed=False) #nx.draw(ERG2)

sign_arr = []
color_map = []
for i in range(N):
    pol = random.randint(0,1)
    polstr = "."
    if(pol == 0): 
        polstr = "-" 
        sign_arr.append('-')
    elif(pol == 1):
        polstr = "+"  
        sign_arr.append('+')
    nx.set_node_attributes(ERGraph, polstr, 'polarite')
    #print(ERGraph.nodes[i]['polarite'])  #shows charge signs of node for control
    #COLOR MAPPING for easier Graph examination
    if(polstr == '-'):
        color_map.append('red')
    elif (polstr == '+'):
        color_map.append('blue')

#Below shows "CONNECTED NODES" (edges), examaning these edges for polartiy gives us they stick or push each other
#print(ERGraph.edges())
#print(ERGraph.number_of_edges())

#EDGES -> E  /  MATCHINGS -> M   M is subset of E.  If M cover all nodes it's perfect matching, if it matching maximum possible elements, then
#We call it's a maximum matching even not perfect

#edges = ERGraph.edges() # We prefer Max matching not all of the edges
matching = nx.maximal_matching(ERGraph) #it cover Max of the elements, either perfect or not
#print(matching) #for control

#print(nx.is_perfect_matching(ERGraph, matching)) #looking for match is perfect

#Now we get Matching result and eliminate to extract Opposite Noded Edges. (+)-----(-) ones, because they pull each other

#I couldn't find any library operation, so i code mine. I got Max matching edges to array named "thestrarray" with string operations
thestr = str(matching)
thestr = thestr[2:-2]
thestr = thestr.replace(", ",",")
thestrarray = thestr.split('),(')
#print(thestrarray) #number of Maximal Matching Edge

for i in range(len(thestrarray)):
    value1 = int(thestrarray[i].split(",")[0])
    sign1 = sign_arr[value1]
    value2 = int(thestrarray[i].split(",")[1])
    sign2 = sign_arr[value2]
    #print(ERGraph.nodes[value1]['polarite'])
    #print(ERGraph.nodes[value2]['polarite'])    
    if(sign1 != sign2): print("NodeDataView({",value1,": {'pol': '",sign1,"'}, ",value2,": {'pol': '",sign2,"'})")
    #elif(sign1 == sign2): print("NodeDataView({",value1,": {'pol': '",sign1,"'}, ",value2,": {'pol': '",sign2,"'}) NOT OKEY") #if user want to see same charges, he or she can open this line.

#CODE IN BELOW DRAW MAP AS WELL, PREDEFINED SMALL N NUMBERS PROVE THE SYSTEM
#nx.draw(ERGraph, node_color=color_map, with_labels = True)

